Instructions to use DJ NativeSwing in NetBeans.


1. Create main application
  With dependencies:
    - Auto Update Service
    - Lookup
    - Progress API

  Change compilation level to 1.6 -> to be set for all modules.


2. In "platform.properties", add this line:	
  run.args.extra=-J-Dsun.awt.disableMixing=true


3. Create wrapped library DJNS-SWT (chrriis.dj.nativeswing.swtimpl)
  With JARs (remove unneeded):
    - DJNativeSwing.jar
    - DJNativeSwing-SWTAPI.jar
    - jna_WindowUtils.jar
    - jna-3.2.4.jar
    - ckeditor_3.0.1.zip
    - FCKeditor_2.6.3.zip
    - TinyMCE_3.3.zip
    - MozillaInterfaces-1.8.1.3.jar
    - SyntaxHighlighter_1.5.1.zip
  With dependencies:
    - Auto Update Services
    - Lookup
    - Module System API
    - Progress API
    - Utilities API

  Copy the content of DJNS-SWT folder to module sources, to create the "utils" package.

  Add to module manifest:
    OpenIDE-Module-Install: utils/Installer.class


4. Create platform-dependant modules
  For each platform to support (example with Windows):
  Create module DJNativeSwing-SWTCore-win32-win32-x86 (chrriis.dj.nativeswing.swtcore.win32.win32.x86)
    with JARs:
      - DJNativeSwing-SWTCore.jar
      - swt-3.6-win32-win32-x86.jar
    with dependencies:
      - DJNS-SWT
      - Lookup

  Change module type from Autoload to Regular.

  Create class Win32APIProvider in chrriis.dj.nativeswing.swtcore.win32.win32.x86:
      @ServiceProvider(service=APIProvider.class)
      public class Win32APIProvider implements APIProvider {
        @Override
        public NativeCoreObjectFactory getObjectFactory() {
          return new NativeCoreObjectFactory(Win32APIProvider.class.getClassLoader());
        }
      }


5. Use it in your application
  With dependencies:
    - DJNS-SWT
    - Lookup
    - Utilities API

  In main UI class:
      static {
        APIProvider apiProvider = Lookup.getDefault().lookup(APIProvider.class);
        NativeCoreObjectFactory.setDefaultFactory(apiProvider.getObjectFactory());
      }

	In UI thread, as early as possible (constructor of the main TopComponent for example):
      NativeInterface.open();
      if(Utils.IS_MAC) {
        new Thread() {
          @Override
          public void run() {
            if(!NativeInterface.isEventPumpRunning()) {
              NativeInterface.runEventPump();
            }
          }
        }.start();
      }

